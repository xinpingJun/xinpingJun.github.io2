<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>黄心平的个人网站</title>
  <subtitle>黄心平的个人网站</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-01-08T01:55:56.143Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>黄心平</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>flex布局</title>
    <link href="http://yoursite.com/2016/11/28/flex%E5%B8%83%E5%B1%80/"/>
    <id>http://yoursite.com/2016/11/28/flex布局/</id>
    <published>2016-11-28T09:16:47.000Z</published>
    <updated>2017-01-08T01:55:56.143Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是flex布局？"><a href="#什么是flex布局？" class="headerlink" title="什么是flex布局？"></a>什么是flex布局？</h2><p>一个Flexbox布局是由一个伸缩容器（flex containers）和在这个容器里的伸缩项目（flex items）组成。<br>flex 弹性盒模型是css3提出的新属性，由于兼容问题，在pc上并不适用。flex布局可以在移动端可以更简便地实现各种布局。</p>
<h2 id="如何使用flex？"><a href="#如何使用flex？" class="headerlink" title="如何使用flex？"></a>如何使用flex？</h2><p>只要在任意容器制定为flex布局即可.</p>
<h2 id="设置容器属性"><a href="#设置容器属性" class="headerlink" title="设置容器属性"></a>设置容器属性</h2><ul>
<li>弹性盒子容器属性</li>
</ul>
<ol>
<li>flex-direction</li>
<li>flex-wrap</li>
<li>flex-flow</li>
<li>justify-content</li>
<li>align-items</li>
<li>align-content</li>
</ol>
<ul>
<li>弹性元素元素属性</li>
</ul>
<ol>
<li>order</li>
<li>align-self</li>
<li>flex-grow</li>
<li>flex-shrink</li>
<li>flex-basis</li>
</ol>
<p><a href="https://xinpingjun.github.io/flexbox/" target="_blank" rel="external">弹性盒子实例链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是flex布局？&quot;&gt;&lt;a href=&quot;#什么是flex布局？&quot; class=&quot;headerlink&quot; title=&quot;什么是flex布局？&quot;&gt;&lt;/a&gt;什么是flex布局？&lt;/h2&gt;&lt;p&gt;一个Flexbox布局是由一个伸缩容器（flex containers）和在
    
    </summary>
    
    
      <category term="flex" scheme="http://yoursite.com/tags/flex/"/>
    
  </entry>
  
  <entry>
    <title>前后端分离</title>
    <link href="http://yoursite.com/2016/10/08/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB/"/>
    <id>http://yoursite.com/2016/10/08/前后端分离/</id>
    <published>2016-10-08T02:53:40.000Z</published>
    <updated>2017-01-08T01:56:18.239Z</updated>
    
    <content type="html"><![CDATA[<p>关于前端，后端工作流程及方法的现状，和前后端分离的优势。<br><a id="more"></a></p>
<h2 id="尝试与改变"><a href="#尝试与改变" class="headerlink" title="尝试与改变"></a>尝试与改变</h2><ul>
<li>如果你没有尝试过前后端分离的工作流程，那么可以先试想一下这样的流程改变：</li>
</ul>
<p>1.把流程从 </p>
<ul>
<li>PM：“我要这个功能”</li>
<li>后端：“这个先找前端做个模板”</li>
<li>前端：“模板做完了”</li>
<li>后端：“我来对接一下，这里样式不对”</li>
<li>前端：“我改完了”</li>
<li>后端：“功能交付”</li>
<li>PM：“春节要加这个活动”</li>
<li>后端：“这个先找前端改个模板”</li>
<li>前端：“模板做完了”</li>
<li>后端：“我来对接一下，这里样式不对”</li>
<li>前端：“我改完了”</li>
<li>后端：“功能交付”</li>
</ul>
<ol>
<li>变成</li>
</ol>
<ul>
<li>PM：“我要这个功能”</li>
<li>前端：“我要接口”</li>
<li>后端：“接口完成了”</li>
<li>前端：“我来对接一下，功能交付”</li>
<li>PM：“春节要加这个活动”</li>
<li>前端：“需要增加接口”</li>
<li>后端：“接口完成了”</li>
<li><p>前端：“我来对接一下，功能交付”</p>
</li>
<li><p>由此可见，前后端分离的主要概念就是：后台只需提供API接口，前端调用AJAX实现数据呈现。</p>
</li>
</ul>
<h2 id="现状与分歧"><a href="#现状与分歧" class="headerlink" title="现状与分歧"></a>现状与分歧</h2><p>作为一名前端开发人员，我们应该尝试一些新颖的技术，完善每一个细节性的问题，不断突破自我。虽然前后端分离已经算不上什么新颖的技术或思路，但是目前很多后台开发人员甚至前端开发人员都没有接触过。</p>
<p>据我个人的了解，如果在一个部门里，部门人员全是后台开发人员，前端的一些页面也是由后台人员完成的，那么前后端分离对于他们而言可能是一片未知的领域，项目大多是前后端强耦合的，甚至不存在前端的概念。</p>
<p>在不重视前端的公司或部门，不了解前后端分离这也无可厚非。在我刚进入一个全是后台开发人员的部门的时候，整个部门就我一个前端，我刚开始的主要职责就是负责项目前端页面的制作和JS功能的实现，虽然部门有前后端分离的意识，但都不知该如何去实践。在那时，部门的后台人员认为前后端分离就是后台不再需要写HTML和JS了，可以交给前端来做了，然而这只能叫做前后端分工。</p>
<p>以上讲述的是一种情况: 不了解前后端分离，也不知如何去实践的。下面还有一种情况：了解前后端分离，但不想去尝试的。</p>
<p>针对第二种情况，很多人也做过相应的解释，其实这就涉及到“前后端分离的利弊”问题。很多后台人员会认为自己所做的那一套没有问题，即便后台套用前端html也是司空见惯，一直是大势所趋，后台MVC框架也是这么推荐使用的，很合理。这时候前端开发人员在部门中的话语权往往是不够的，或者认为后台开发人员的意见永远是对的，没有主观性。</p>
<p>相反，也有可能是后台开发人员非常推荐前后端分离，而前端开发人员不想去实践的。这时候前端会认为后台开发人员在瞎折腾，之前前后端不分离项目做起来都很顺利，分离了反而会给自己带来额外的工作量和学习成本，而这就取决于前端的技术能力和见识了。</p>
<p>当然，这也是我个人认为的前后端分离所存在的一些现状和分歧所在。</p>
<h2 id="场景与要求"><a href="#场景与要求" class="headerlink" title="场景与要求"></a>场景与要求</h2><p>对于前后端分离的应用场景，不是所有的场景都适合，但是大多数项目都能够通过前后端分离来实现。</p>
<p>由于我主要从事企业级后台应用的前端开发工作，个人认为对于后台应用的开发来说，前后端分离带来的利是远大于弊的。</p>
<p>大多数后台应用我们都可以做成SPA应用（单页应用），而单页应用最主要的特点就是局部刷新，这通过前端控制路由调用AJAX，后台提供接口便可以实现，而且这样的方式用户体验更加友好，网页加载更加快速，开发和维护成本也降低了不少，效率明显提升。</p>
<p>同样的，在展示类网站和移动APP页面中前后端分离也同样试用。前后端不分离的情况下，服务端要单独针对Web端做处理，返回完整HTML，这样势必增加服务端的复杂度，可维护性差，而web端需要加载完整的HTML，一定程度上影响网页性能，这对于移动端性能为王的地方非常的不友好。</p>
<p>随着前端技术的发展和迭代，前端MVC框架应运而生，利用目前主流的前端框架，如React、Vue、Angular等我们可以轻松的构建起一个无需服务器端渲染就可以展示的网站，同时这类框架都提供了前端路由功能，后台可以不再控制路由的跳转，将原本属于前端的业务逻辑全部丢给前端，这样前后端分离可以说是最为彻底。下面是一段前端控制路由的代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">router</span>) </span>&#123;</div><div class="line">    router.map(&#123;</div><div class="line">        <span class="string">'/'</span>: &#123;</div><div class="line">            <span class="attr">component</span>: <span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</div><div class="line">                <span class="built_in">require</span>([<span class="string">'./PC.vue'</span>], resolve)</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="string">'/m/:params'</span>: &#123;</div><div class="line">            <span class="attr">component</span>: <span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</div><div class="line">                <span class="built_in">require</span>([<span class="string">'./Mobile.vue'</span>], resolve)</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="string">'/p'</span>: &#123;</div><div class="line">            <span class="attr">component</span>: <span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</div><div class="line">                <span class="built_in">require</span>([<span class="string">'./PC.vue'</span>], resolve)</div><div class="line">            &#125;,</div><div class="line">            <span class="attr">subRoutes</span>: &#123;</div><div class="line">                <span class="string">'/process/:username'</span>: &#123;</div><div class="line">                    <span class="attr">component</span>: <span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</div><div class="line">                        <span class="built_in">require</span>([<span class="string">'./components/Process.vue'</span>], resolve)</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>前后端分离的实现对技术人员尤其是前端人员的要求会上升一个层次，前端的工作不只是切页面写模板或是处理一些简单的js逻辑，前端需要处理服务器返回的各种数据格式，还需要掌握一系列的数据处理逻辑、MVC思想和各种主流框架。</p>
<h2 id="优势与意义"><a href="#优势与意义" class="headerlink" title="优势与意义"></a>优势与意义</h2><p>对于前后端分离的意义我们也可以看做是前端渲染的意义，我主要总结了下面四点：</p>
<ol>
<li>前端不再需要向后台提供模板或是后台在前端html中嵌入后台代码，如：</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--服务器端渲染 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">''</span>&gt;</span>--请选择所属业务--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">    &#123;% for p in p_list %&#125;</div><div class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"&#123;&#123; p &#125;&#125;"</span>&gt;</span>&#123;&#123; p &#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">    &#123;% endfor %&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这是前后端耦合的，可读性差。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;!--前端渲染 --&gt;</div><div class="line">&lt;template&gt;</div><div class="line">    &lt;select id=&quot;rander&quot;&gt;</div><div class="line">        &lt;option value=&apos;&apos;&gt;--请选择所属业务--&lt;/option&gt;</div><div class="line">        &lt;option v-for=&quot;list in lists&quot; :value=&quot;list&quot; v-text=&quot;list&quot;&gt;&lt;/option&gt;</div><div class="line">    &lt;/select&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">export default &#123;</div><div class="line">    data: &#123;</div><div class="line">        return &#123;</div><div class="line">            lists: [&apos;选项一&apos;, &apos;选项二&apos;, &apos;选项三&apos;, &apos;选项四&apos;]</div><div class="line">        &#125;</div><div class="line">    &#125;，</div><div class="line">    ready: function () &#123;</div><div class="line">        this.$http(&#123;</div><div class="line">            url: &apos;/demo/&apos;,</div><div class="line">            method: &apos;POST&apos;,</div><div class="line">        &#125;)</div><div class="line">        .then(function (response) &#123;</div><div class="line">            this.lists = response.data.lists // 获取服务器端数据并渲染</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>上面是前端渲染的一段代码，前端通过AJAX调用后台接口，数据逻辑放在前端，由前端维护。</p>
<ol>
<li>提高工作效率，分工更加明确</li>
</ol>
<p>前后端分离的工作流程可以使前端只关注前端的事，后台只关心后台的活，两者开发可以同时进行，在后台还没有时间提供接口的时候，前端可以先将数据写死或者调用本地的json文件即可，页面的增加和路由的修改也不必再去麻烦后台，开发更加灵活。</p>
<ol>
<li>局部性能提升</li>
</ol>
<p>通过前端路由的配置，我们可以实现页面的按需加载，无需一开始加载首页便加载网站的所有的资源，服务器也不再需要解析前端页面，在页面交互及用户体验上有所提升。</p>
<ol>
<li>降低维护成本</li>
</ol>
<p>通过目前主流的前端MVC框架，我们可以非常快速的定位及发现问题的所在，客户端的问题不再需要后台人员参与及调试，代码重构及可维护性增强。</p>
<h2 id="心得与体会"><a href="#心得与体会" class="headerlink" title="心得与体会"></a>心得与体会</h2><p>一路走来，项目一个接着一个，从一开始的后台控制路由、后台渲染页面到现在的前端控制路由、前端渲染数据，工作流程和方式都发生了很大的变化。每当遇到下面情形的时候，我都会为前后端分离带来的优势而感慨一番：</p>
<ul>
<li><p>项目一开始制作前端页面的时候，我不再需要后台给我配置服务器环境了</p>
</li>
<li><p>项目的前端文件可以在需要调用后台接口的时候丢进服务器就好了，完全不需要事先放进去</p>
</li>
<li><p>增加一个项目页面需要配置路由的时候不再需要让后台同事给我加了，自己前端搞定</p>
</li>
<li><p>前端文件里不再掺杂后台的代码逻辑了，看起来舒服多了</p>
</li>
<li><p>页面跳转比之前更加流畅了，局部渲染局部加载非常快速</p>
</li>
<li><p>页面模板可以重复使用了，前端组件化开发提高了开发效率</p>
</li>
</ul>
<p>等等。面对快速发展的前端，我们应该去适应其带来的工作方式和流程的改变，目前的前后端分离的工作方式必然是今后的趋势所在，作为一个前端开发人员，我们应当承担这个普及前端新知识和改变现状的职责。</p>
<p>只有尝试了才知道适不适合，只有切身体会才能辨别谁是谁非，本文并非推崇一定要前后端分离，而是希望大家在合适的应用场景下去尝试前后端分离，在丰富经验的同时或许也会擦出火花。</p>
<h4 id="转载自一个萝卜一个坑-博客园-http-www-cnblogs-com-luozhihao"><a href="#转载自一个萝卜一个坑-博客园-http-www-cnblogs-com-luozhihao" class="headerlink" title="转载自一个萝卜一个坑 -博客园[http://www.cnblogs.com/luozhihao]"></a>转载自一个萝卜一个坑 -博客园[<a href="http://www.cnblogs.com/luozhihao" target="_blank" rel="external">http://www.cnblogs.com/luozhihao</a>]</h4>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于前端，后端工作流程及方法的现状，和前后端分离的优势。&lt;br&gt;
    
    </summary>
    
    
      <category term="前后端分离" scheme="http://yoursite.com/tags/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB/"/>
    
  </entry>
  
  <entry>
    <title>css命名规范</title>
    <link href="http://yoursite.com/2016/10/05/css%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/"/>
    <id>http://yoursite.com/2016/10/05/css命名规范/</id>
    <published>2016-10-05T03:39:13.000Z</published>
    <updated>2017-01-09T02:15:36.789Z</updated>
    
    <content type="html"><![CDATA[<p>收集整理css相关命名规范。<br><a id="more"></a></p>
<h3 id="css文件分类和引用顺序"><a href="#css文件分类和引用顺序" class="headerlink" title="css文件分类和引用顺序"></a>css文件分类和引用顺序</h3><ol>
<li>公共样式 （重置设置默认值，通用模块等） </li>
<li>特殊样式（与网站整体差异较大维护高）</li>
<li>皮肤样式（换肤功能网站）<h3 id="css命名空间"><a href="#css命名空间" class="headerlink" title="css命名空间"></a>css命名空间</h3></li>
</ol>
<ul>
<li>布局（grid）（.g-）页面的头部主体边栏底部等</li>
<li>模块（module）（.m-）可以重复使用的模块如导航，各种列表，选项卡等</li>
<li>元件（unit）（.u-）小巧的个体，用于各个模块中，如按钮，输入框，图标等</li>
<li>功能（function）(.f-) 浮动，清楚浮动，居中等</li>
<li>皮肤（skin）（.s-）用于可以换肤的网站</li>
<li>状态（.z-）如选中，显示，关闭等</li>
</ul>
<h4 id="页面框架命名，一般具有唯一性，推荐用ID命名"><a href="#页面框架命名，一般具有唯一性，推荐用ID命名" class="headerlink" title="页面框架命名，一般具有唯一性，推荐用ID命名"></a>页面框架命名，一般具有唯一性，推荐用ID命名</h4><table>
<thead>
<tr>
<th style="text-align:left">ID名称</th>
<th style="text-align:left">命名</th>
<th style="text-align:left">ID名称</th>
<th style="text-align:left">命名</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">头部</td>
<td style="text-align:left">header</td>
<td style="text-align:left">主体</td>
<td style="text-align:left">main</td>
</tr>
<tr>
<td style="text-align:left">脚部</td>
<td style="text-align:left">footer</td>
<td style="text-align:left">容器</td>
<td style="text-align:left">wrapper</td>
</tr>
<tr>
<td style="text-align:left">侧栏</td>
<td style="text-align:left">sideBar</td>
<td style="text-align:left">栏目</td>
<td style="text-align:left">column</td>
</tr>
<tr>
<td style="text-align:left">布局</td>
<td style="text-align:left">layout</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="模块结构命名"><a href="#模块结构命名" class="headerlink" title="模块结构命名"></a>模块结构命名</h4><table>
<thead>
<tr>
<th style="text-align:left">Class名称</th>
<th style="text-align:left">命名</th>
<th style="text-align:left">Class名称</th>
<th style="text-align:left">命名</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">模块(如：新闻模块)</td>
<td style="text-align:left">mod (mod-news)</td>
<td style="text-align:left">标题栏</td>
<td style="text-align:left">title</td>
</tr>
<tr>
<td style="text-align:left">内容</td>
<td style="text-align:left">content</td>
<td style="text-align:left">次级内容</td>
<td style="text-align:left">sub-content</td>
</tr>
</tbody>
</table>
<h4 id="导航结构命名"><a href="#导航结构命名" class="headerlink" title="导航结构命名"></a>导航结构命名</h4><table>
<thead>
<tr>
<th style="text-align:left">Class名称</th>
<th style="text-align:left">命名</th>
<th style="text-align:left">Class名称</th>
<th style="text-align:left">命名</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">导航</td>
<td style="text-align:left">nav</td>
<td style="text-align:left">主导航</td>
<td style="text-align:left">main-nav</td>
</tr>
<tr>
<td style="text-align:left">子导航</td>
<td style="text-align:left">sub-nav</td>
<td style="text-align:left">顶部导航</td>
<td style="text-align:left">top-nav</td>
</tr>
<tr>
<td style="text-align:left">菜单</td>
<td style="text-align:left">menu</td>
<td style="text-align:left">子菜单</td>
<td style="text-align:left">sub-menu</td>
</tr>
</tbody>
</table>
<h4 id="一般元素命名"><a href="#一般元素命名" class="headerlink" title="一般元素命名"></a>一般元素命名</h4><table>
<thead>
<tr>
<th style="text-align:left">Class名称</th>
<th style="text-align:left">命名</th>
<th style="text-align:left">Class名称</th>
<th style="text-align:left">命名</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">二级</td>
<td style="text-align:left">sub</td>
<td style="text-align:left">面包屑</td>
<td style="text-align:left">breadcrumb</td>
</tr>
<tr>
<td style="text-align:left">标志</td>
<td style="text-align:left">logo</td>
<td style="text-align:left">广告</td>
<td style="text-align:left">bner(禁用banner或ad)</td>
</tr>
<tr>
<td style="text-align:left">登陆</td>
<td style="text-align:left">login</td>
<td style="text-align:left">注册</td>
<td style="text-align:left">register/reg</td>
</tr>
<tr>
<td style="text-align:left">搜索</td>
<td style="text-align:left">search</td>
<td style="text-align:left">加入</td>
<td style="text-align:left">join</td>
</tr>
<tr>
<td style="text-align:left">状态</td>
<td style="text-align:left">status</td>
<td style="text-align:left">按钮</td>
<td style="text-align:left">btn</td>
</tr>
<tr>
<td style="text-align:left">滚动</td>
<td style="text-align:left">scroll</td>
<td style="text-align:left">标签页</td>
<td style="text-align:left">tab</td>
</tr>
<tr>
<td style="text-align:left">文章列表</td>
<td style="text-align:left">list</td>
<td style="text-align:left">短消息</td>
<td style="text-align:left">msg/message</td>
</tr>
<tr>
<td style="text-align:left">当前的</td>
<td style="text-align:left">current</td>
<td style="text-align:left">提示小技巧</td>
<td style="text-align:left">tips</td>
</tr>
<tr>
<td style="text-align:left">图标</td>
<td style="text-align:left">icon</td>
<td style="text-align:left">注释</td>
<td style="text-align:left">note</td>
</tr>
<tr>
<td style="text-align:left">指南</td>
<td style="text-align:left">guide</td>
<td style="text-align:left">服务</td>
<td style="text-align:left">service</td>
</tr>
<tr>
<td style="text-align:left">热点</td>
<td style="text-align:left">hot</td>
<td style="text-align:left">新闻</td>
<td style="text-align:left">news</td>
</tr>
<tr>
<td style="text-align:left">下载</td>
<td style="text-align:left">download</td>
<td style="text-align:left">投票</td>
<td style="text-align:left">vote</td>
</tr>
<tr>
<td style="text-align:left">合作伙伴</td>
<td style="text-align:left">partner</td>
<td style="text-align:left">友情链接</td>
<td style="text-align:left">link</td>
</tr>
<tr>
<td style="text-align:left">版权</td>
<td style="text-align:left">copyright</td>
<td style="text-align:left">演示</td>
<td style="text-align:left">demo</td>
</tr>
<tr>
<td style="text-align:left">下拉框</td>
<td style="text-align:left">select</td>
<td style="text-align:left">摘要</td>
<td style="text-align:left">summary</td>
</tr>
<tr>
<td style="text-align:left">翻页</td>
<td style="text-align:left">pages</td>
<td style="text-align:left">主题风格</td>
<td style="text-align:left">themes</td>
</tr>
<tr>
<td style="text-align:left">设置</td>
<td style="text-align:left">set</td>
<td style="text-align:left">成功</td>
<td style="text-align:left">suc</td>
</tr>
<tr>
<td style="text-align:left">按钮</td>
<td style="text-align:left">btn</td>
<td style="text-align:left">文本</td>
<td style="text-align:left">txt</td>
</tr>
<tr>
<td style="text-align:left">颜色</td>
<td style="text-align:left">color/c</td>
<td style="text-align:left">背景</td>
<td style="text-align:left">bg</td>
</tr>
<tr>
<td style="text-align:left">边框</td>
<td style="text-align:left">border/bor</td>
<td style="text-align:left">居中</td>
<td style="text-align:left">center</td>
</tr>
<tr>
<td style="text-align:left">上</td>
<td style="text-align:left">top/t</td>
<td style="text-align:left">下</td>
<td style="text-align:left">bottom/b</td>
</tr>
<tr>
<td style="text-align:left">左</td>
<td style="text-align:left">left/l</td>
<td style="text-align:left">右</td>
<td style="text-align:left">right/r</td>
</tr>
<tr>
<td style="text-align:left">添加</td>
<td style="text-align:left">add</td>
<td style="text-align:left">删除</td>
<td style="text-align:left">del</td>
</tr>
<tr>
<td style="text-align:left">间隔</td>
<td style="text-align:left">sp</td>
<td style="text-align:left">段落</td>
<td style="text-align:left">p</td>
</tr>
<tr>
<td style="text-align:left">弹出层</td>
<td style="text-align:left">pop</td>
<td style="text-align:left">公共</td>
<td style="text-align:left">global/gb</td>
</tr>
<tr>
<td style="text-align:left">操作</td>
<td style="text-align:left">op</td>
<td style="text-align:left">密码</td>
<td style="text-align:left">pwd</td>
</tr>
<tr>
<td style="text-align:left">透明</td>
<td style="text-align:left">tran</td>
<td style="text-align:left">信息</td>
<td style="text-align:left">info</td>
</tr>
<tr>
<td style="text-align:left">重点</td>
<td style="text-align:left">hit</td>
<td style="text-align:left">预览</td>
<td style="text-align:left">pvw</td>
</tr>
<tr>
<td style="text-align:left">单行输入框</td>
<td style="text-align:left">input</td>
<td style="text-align:left">首页</td>
<td style="text-align:left">index</td>
</tr>
<tr>
<td style="text-align:left">日志</td>
<td style="text-align:left">blog</td>
<td style="text-align:left">相册</td>
<td style="text-align:left">photo</td>
</tr>
<tr>
<td style="text-align:left">留言板</td>
<td style="text-align:left">guestbook</td>
<td style="text-align:left">用户</td>
<td style="text-align:left">user</td>
</tr>
<tr>
<td style="text-align:left">确认</td>
<td style="text-align:left">confirm</td>
<td style="text-align:left">取消</td>
<td style="text-align:left">cancel</td>
</tr>
<tr>
<td style="text-align:left">报错</td>
<td style="text-align:left">error</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
<h4 id="全局皮肤样式"><a href="#全局皮肤样式" class="headerlink" title="全局皮肤样式"></a>全局皮肤样式</h4><h6 id="文字颜色-命名空间text-xxx"><a href="#文字颜色-命名空间text-xxx" class="headerlink" title="文字颜色(命名空间text-xxx)"></a>文字颜色(命名空间text-xxx)</h6><p>text-c1, text-c2,text-c3……</p>
<h6 id="背景颜色-命名空间bg-xxx"><a href="#背景颜色-命名空间bg-xxx" class="headerlink" title="背景颜色(命名空间bg -xxx)"></a>背景颜色(命名空间bg -xxx)</h6><p>bg-c1,bg-c2,bg-c3……</p>
<h6 id="边框颜色-命名空间border-xxx"><a href="#边框颜色-命名空间border-xxx" class="headerlink" title="边框颜色(命名空间border-xxx)"></a>边框颜色(命名空间border-xxx)</h6><p>border-c1,border-c2,border-c3……<br><a href="https://github.com/hoosin/lite/blob/master/Standard/CSS%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83.md" target="_blank" rel="external"> 转载自 hoosin </a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;收集整理css相关命名规范。&lt;br&gt;
    
    </summary>
    
      <category term="命名规范" scheme="http://yoursite.com/categories/%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>npm常用命令</title>
    <link href="http://yoursite.com/2016/10/04/npm%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2016/10/04/npm常用命令/</id>
    <published>2016-10-04T07:37:05.000Z</published>
    <updated>2017-01-08T01:56:07.960Z</updated>
    
    <content type="html"><![CDATA[<p>npm常用命令操作。<br><a id="more"></a></p>
<ul>
<li><p>npm install xxx 安装模块</p>
</li>
<li><p>npm install xxx -g 将模块安装到全局环境中 </p>
</li>
<li><p>npm ls 查看安装的模块及依赖</p>
</li>
<li><p>npm ls -g 查看全局安装的模块及依赖</p>
</li>
<li><p>npm uninstall xxx  (-g) 卸载模块</p>
</li>
<li><p>npm cache clean 清理缓存</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;npm常用命令操作。&lt;br&gt;
    
    </summary>
    
    
      <category term="npm" scheme="http://yoursite.com/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>rem与媒体查询</title>
    <link href="http://yoursite.com/2016/09/29/rem%E4%B8%8E%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2/"/>
    <id>http://yoursite.com/2016/09/29/rem与媒体查询/</id>
    <published>2016-09-29T02:33:13.000Z</published>
    <updated>2017-01-07T07:24:24.936Z</updated>
    
    <content type="html"><![CDATA[<p>统一使用 rem 作为单位，可以通过更改html根标签上的字体大小来整体放大和缩小UI。</p>
<a id="more"></a>
<h3 id="旧项目利用转换器将默认的css样式表px单位转换为rem"><a href="#旧项目利用转换器将默认的css样式表px单位转换为rem" class="headerlink" title="旧项目利用转换器将默认的css样式表px单位转换为rem"></a>旧项目利用转换器将默认的css样式表px单位转换为rem</h3><p>   转换器链接<a href="http://www.alurk.com/" target="_blank" rel="external">链接</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1rem = 100px</div></pre></td></tr></table></figure></p>
<p>因为chrome下最小字体大小为12px，所以不能把html的font-size设置成1px或者10px，100px或者20px是我们最好的选择。（设置谷歌浏览器最小字号为10px）</p>
<h3 id="为什么小于12px字号不生效"><a href="#为什么小于12px字号不生效" class="headerlink" title="为什么小于12px字号不生效"></a>为什么小于12px字号不生效</h3><p>如果你是从pc开发转到移动平台的，或者应该记得在pc端，Chrome及后来加入Webkit阵营的Opera都不支持页面字号小于12px，当然你可以通过更改浏览器设置来改变这一情况，然后这并没有什么卵用，不是么？</p>
<p>不幸的是，在移动端这个限制也依然存在，在Android Chrome上（包括部分版本上的Android Browser），仍然不支持小于12px的字号（测试至Android5.0.2, Chrome46），除此之外，其他浏览器包括iOS上众浏览器都能够很好的支持超小字体。</p>
<p>所以，如果希望你的程序足够安全，尽量不要定义小于12px的字号，或者换一种方式来实现。</p>
<p>^ 假设你的项目使用了rem，那么不要使用10作为换算因子，原因也如上</p>
<h3 id="媒体查询-参考sui-链接"><a href="#媒体查询-参考sui-链接" class="headerlink" title="媒体查询    参考sui 链接"></a>媒体查询    参考sui <a href="http://m.sui.taobao.org/" target="_blank" rel="external">链接</a></h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*媒体查询（参考sui）根字号为20px*/</span></div><div class="line"><span class="selector-tag">html</span> &#123;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> only screen and (min-width: <span class="number">400px</span>) &#123;</div><div class="line">    <span class="selector-tag">html</span> &#123;</div><div class="line">        <span class="attribute">font-size</span>: <span class="number">21.33333333px</span> <span class="meta">!important</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> only screen and (min-width: <span class="number">414px</span>) &#123;</div><div class="line">    <span class="selector-tag">html</span> &#123;</div><div class="line">        <span class="attribute">font-size</span>: <span class="number">22.08px</span> <span class="meta">!important</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> only screen and (min-width: <span class="number">480px</span>) &#123;</div><div class="line">    <span class="selector-tag">html</span> &#123;</div><div class="line">        <span class="attribute">font-size</span>: <span class="number">25.6px</span> <span class="meta">!important</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*根字号为100px*/</span></div><div class="line"><span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">100px</span>;&#125;</div><div class="line">@<span class="keyword">media</span> only screen and (min-width: <span class="number">400px</span>)&#123;</div><div class="line">    <span class="selector-tag">html</span> &#123;</div><div class="line">        <span class="attribute">font-size</span>: <span class="number">106.66666px</span> <span class="meta">!important</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> only screen and (min-width: <span class="number">414px</span>)&#123;</div><div class="line">    <span class="selector-tag">html</span> &#123;</div><div class="line">        <span class="attribute">font-size</span>: <span class="number">110.4px</span> <span class="meta">!important</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> only screen and (min-width: <span class="number">480px</span>)&#123;</div><div class="line">    <span class="selector-tag">html</span> &#123;</div><div class="line">        <span class="attribute">font-size</span>: <span class="number">128px</span> <span class="meta">!important</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;统一使用 rem 作为单位，可以通过更改html根标签上的字体大小来整体放大和缩小UI。&lt;/p&gt;
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="rem" scheme="http://yoursite.com/tags/rem/"/>
    
  </entry>
  
</feed>
